        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 924 returned 100% blocks executed 100%
      924:    8:int compare(const void* a, const void* b) {
      924:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 228 (fallthrough)
branch  1 taken 696
      228:   10:    return 1;
      696:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 190 (fallthrough)
branch  1 taken 506
      190:   12:    return -1;
      506:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 91%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 16
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 16
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 16 (fallthrough)
branch  1 taken 0
branch  2 taken 14 (fallthrough)
branch  3 taken 2
        -:   49:    {
       14:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 20
branch  1 taken 2 (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 200
branch  1 taken 20 (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 180 (fallthrough)
branch  1 taken 20
branch  2 taken 0 (fallthrough)
branch  3 taken 180
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 40
branch  1 taken 2 (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 310
branch  1 taken 20 (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 20 (fallthrough)
branch  1 taken 290
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 20 (fallthrough)
branch  1 taken 0
branch  2 taken 2 (fallthrough)
branch  3 taken 18
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       10:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
branch  0 taken 24
branch  1 taken 8 (fallthrough)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
branch  0 taken 56
branch  1 taken 8 (fallthrough)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       10:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       10:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 8
branch  1 taken 2 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 54
branch  1 taken 2 (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 10
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 2
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 490 returned 100% blocks executed 100%
      490:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      490:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      490:  209:  if (state->deckCount[player] < 1)
branch  0 taken 472 (fallthrough)
branch  1 taken 18
      472:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 18
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      586:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 550
branch  1 taken 18 (fallthrough)
      550:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 550
      550:  216:    newDeck[newDeckPos] = state->deck[player][card];
      550:  217:    newDeckPos++;
    10810:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 10260
branch  1 taken 550 (fallthrough)
    10260:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      550:  221:    state->deckCount[player]--;
        -:  222:  }
      568:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 550
branch  1 taken 18 (fallthrough)
      550:  224:    state->deck[player][i] = newDeck[i];
      550:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 374 returned 100% blocks executed 100%
      374:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      374:  280:  who = state->whoseTurn;
        -:  281:
      374:  282:  if (state->numBuys < 1){
branch  0 taken 54 (fallthrough)
branch  1 taken 320
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       54:  285:    return -1;
      320:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 320
branch  1 taken 54 (fallthrough)
branch  2 taken 266
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       54:  289:    return -1;
      266:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 266
branch  1 taken 50 (fallthrough)
branch  2 taken 216
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       50:  293:    return -1;
        -:  294:  } else {
      216:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      216:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 216
        -:  298:  
      216:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 216
      216:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      216:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1674 returned 100% blocks executed 100%
     1674:  320:int supplyCount(int card, struct gameState *state) {
     1674:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 58 returned 100% blocks executed 59%
       58:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       58:  326:  int count = 0;
        -:  327:
       58:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 0
branch  1 taken 58 (fallthrough)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
       58:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 0
branch  1 taken 58 (fallthrough)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
      316:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 258
branch  1 taken 58 (fallthrough)
        -:  339:    {
      258:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 0 (fallthrough)
branch  1 taken 258
        -:  341:    }
        -:  342:
       58:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 22 returned 100% blocks executed 100%
       22:  346:int whoseTurn(struct gameState *state) {
       22:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 10 returned 100% blocks executed 100%
       10:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       10:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        8:  401:  j = 0;
      208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 200
branch  1 taken 8 (fallthrough)
        -:  403:    {
      200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12 (fallthrough)
branch  1 taken 188
        -:  405:	{
       12:  406:	  j++;
        -:  407:	}
        -:  408:    }
        8:  409:  if ( j >= 3)
branch  0 taken 2 (fallthrough)
branch  1 taken 6
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        6:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 100 returned 100% blocks executed 92%
      100:  417:int scoreFor (int player, struct gameState* state) {
        -:  418:
        -:  419:  int i;
      100:  420:  int score = 0;
        -:  421:  //score from hand
      120:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 20
branch  1 taken 100 (fallthrough)
        -:  423:    {
       20:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 20
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
      388:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 288
branch  1 taken 100 (fallthrough)
        -:  434:    {
      288:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 282
      288:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 282
      288:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 6 (fallthrough)
branch  1 taken 282
      288:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 6 (fallthrough)
branch  1 taken 282
      288:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 6 (fallthrough)
branch  1 taken 282
      288:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 58 (fallthrough)
branch  1 taken 230
call    2 returned 58
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
      120:  444:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 20
branch  1 taken 100 (fallthrough)
        -:  445:    {
       20:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 4 (fallthrough)
branch  1 taken 16
       20:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 20
call    2 never executed
        -:  452:    }
        -:  453:
      100:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 780 returned 100% blocks executed 100%
      780:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      780:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 252 (fallthrough)
branch  1 taken 528
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      722:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 470
branch  1 taken 252 (fallthrough)
      470:  534:      state->deck[player][i] = state->discard[player][i];
      470:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      252:  538:    state->deckCount[player] = state->discardCount[player];
      252:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      252:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 252
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      252:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      252:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      252:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      252:  559:    if (deckCounter == 0)
branch  0 taken 242 (fallthrough)
branch  1 taken 10
      242:  560:      return -1;
        -:  561:
       10:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  563:    state->deckCount[player]--;
       10:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      528:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      528:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      528:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      528:  576:    state->deckCount[player]--;
      528:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      538:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 590 returned 100% blocks executed 97%
      590:  583:int getCost(int cardNumber)
        -:  584:{
      590:  585:  switch( cardNumber ) 
branch  0 taken 20
branch  1 taken 22
branch  2 taken 22
branch  3 taken 22
branch  4 taken 20
branch  5 taken 22
branch  6 taken 22
branch  7 taken 22
branch  8 taken 22
branch  9 taken 22
branch 10 taken 22
branch 11 taken 22
branch 12 taken 22
branch 13 taken 22
branch 14 taken 22
branch 15 taken 22
branch 16 taken 22
branch 17 taken 22
branch 18 taken 22
branch 19 taken 22
branch 20 taken 22
branch 21 taken 22
branch 22 taken 22
branch 23 taken 22
branch 24 taken 22
branch 25 taken 22
branch 26 taken 22
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
       20:  588:      return 0;
        -:  589:    case estate:
       22:  590:      return 2;
        -:  591:    case duchy:
       22:  592:      return 5;
        -:  593:    case province:
       22:  594:      return 8;
        -:  595:    case copper:
       20:  596:      return 0;
        -:  597:    case silver:
       22:  598:      return 3;
        -:  599:    case gold:
       22:  600:      return 6;
        -:  601:    case adventurer:
       22:  602:      return 6;
        -:  603:    case council_room:
       22:  604:      return 5;
        -:  605:    case feast:
       22:  606:      return 4;
        -:  607:    case gardens:
       22:  608:      return 4;
        -:  609:    case mine:
       22:  610:      return 5;
        -:  611:    case remodel:
       22:  612:      return 4;
        -:  613:    case smithy:
       22:  614:      return 4;
        -:  615:    case village:
       22:  616:      return 3;
        -:  617:    case baron:
       22:  618:      return 4;
        -:  619:    case great_hall:
       22:  620:      return 3;
        -:  621:    case minion:
       22:  622:      return 5;
        -:  623:    case steward:
       22:  624:      return 3;
        -:  625:    case tribute:
       22:  626:      return 5;
        -:  627:    case ambassador:
       22:  628:      return 3;
        -:  629:    case cutpurse:
       22:  630:      return 4;
        -:  631:    case embargo: 
       22:  632:      return 2;
        -:  633:    case outpost:
       22:  634:      return 5;
        -:  635:    case salvager:
       22:  636:      return 4;
        -:  637:    case sea_hag:
       22:  638:      return 4;
        -:  639:    case treasure_map:
       22:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/**
        -:  647: * Smithy Card Effect.
        -:  648: * Draws three cards from the current player's deck.
        -:  649: */
function smithyCardEffect called 6 returned 100% blocks executed 100%
        6:  650:int smithyCardEffect(int currentPlayer, struct gameState *state) {
        -:  651:  int i;
        -:  652:  /*
        -:  653:    Bug:
        -:  654:    '<' replaced with '<='. Player now draws 4 cards instead of 3.
        -:  655:    Fix:
        -:  656:    (i = 1) or (i < 3)
        -:  657:  */
       30:  658:  for (i = 0; i <= 3; i++) {
branch  0 taken 24
branch  1 taken 6 (fallthrough)
       24:  659:    drawCard(currentPlayer, state);
call    0 returned 24
        -:  660:  }
        6:  661:  return 0;
        -:  662:}
        -:  663:
        -:  664:/**
        -:  665: * Adventurer Card Effect.
        -:  666: * Draws cards from the current player's deck until 2 treasure cards have been drawn.
        -:  667: * If the player runs out of cards in their deck, then their deck is shuffled.
        -:  668: * All cards drawn that are no treasure are discarded.
        -:  669: */
function adventurerCardEffect called 6 returned 100% blocks executed 100%
        6:  670:int adventurerCardEffect(int currentPlayer, struct gameState *state) {
        6:  671:  int treasureDrawn = 0;
        6:  672:  int cardDrawn = 0;
        6:  673:  int tempIndex = 0;
        -:  674:  int tempHand[MAX_HAND];
        -:  675:  
        -:  676:  /**
        -:  677:   * Bug:
        -:  678:   * Player may not have enough treasure cards in their deck to draw 2 treasure cards.
        -:  679:   * In this case, this will loop forever.
        -:  680:   * Fix:
        -:  681:   * Add an integer counting number of shuffle times. 
        -:  682:   * If we try to shuffle more than once, then break out of the while loop.
        -:  683:   */
      648:  684:  while (treasureDrawn < 2) {
branch  0 taken 636
branch  1 taken 6 (fallthrough)
      636:  685:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 230 (fallthrough)
branch  1 taken 406
      230:  686:      shuffle(currentPlayer, state);
call    0 returned 230
        -:  687:    }
      636:  688:    drawCard(currentPlayer, state);
call    0 returned 636
      636:  689:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
      636:  690:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 636 (fallthrough)
branch  1 taken 0
branch  2 taken 628 (fallthrough)
branch  3 taken 8
branch  4 taken 4 (fallthrough)
branch  5 taken 624
       12:  691:      treasureDrawn++;
        -:  692:    } else {
      624:  693:      tempHand[tempIndex++] = cardDrawn;
      624:  694:      state->handCount[currentPlayer]--;
        -:  695:    }
        -:  696:  }
      630:  697:  while (tempIndex > 1) {
branch  0 taken 618
branch  1 taken 6 (fallthrough)
      618:  698:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[tempIndex - 1];
      618:  699:    tempIndex--;
        -:  700:  }
        6:  701:  return 0;
        -:  702:}
        -:  703:
        -:  704:/**
        -:  705: * Council Room Card Effect.
        -:  706: * Draws 4 cards from the current player's deck, then gives them an extra buy. Also draws a card
        -:  707: * for each other player.
        -:  708: */
function councilRoomCardEffect called 6 returned 100% blocks executed 100%
        6:  709:int councilRoomCardEffect(int currentPlayer, struct gameState *state) {
        -:  710:  int i;
       30:  711:  for (i = 0; i < 4; i++) {
branch  0 taken 24
branch  1 taken 6 (fallthrough)
       24:  712:    drawCard(currentPlayer, state);
call    0 returned 24
        -:  713:	}
        6:  714:  state->numBuys++;
        -:  715:
        -:  716:  /*
        -:  717:    Bug:
        -:  718:    Removed test for current player so that current player draws an extra card.
        -:  719:    Fix:
        -:  720:    if (i != currentPlayer) {
        -:  721:      drawCard(i, state);
        -:  722:    }
        -:  723:    or draw one fewer cards above.    
        -:  724:  */
       30:  725:  for (i = 0; i < state->numPlayers; i++)	{
branch  0 taken 24
branch  1 taken 6 (fallthrough)
       24:  726:    drawCard(i, state);
call    0 returned 24
        -:  727:	}
        6:  728:  return 0;
        -:  729:}
        -:  730:
        -:  731:/**
        -:  732: * Village Card Effect.
        -:  733: * Draws a card from the current player's deck and gives them 2 additional actions.
        -:  734: */
function villageCardEffect called 4 returned 100% blocks executed 100%
        4:  735:int villageCardEffect(int currentPlayer, struct gameState *state) {
        4:  736:  drawCard(currentPlayer, state);			
call    0 returned 4
        4:  737:  state->numActions += 2;
        4:  738:  return 0;
        -:  739:}
        -:  740:
        -:  741:/**
        -:  742: * Remodel Card Effect.
        -:  743: * Trashes choice1 card from the player and gains choice2 as long as choice2 is worth no more than 2 gold than choice1.
        -:  744: */
function remodelCardEffect called 0 returned 0% blocks executed 0%
    #####:  745:int remodelCardEffect(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  746:  int i, j;
        -:  747:  /*
        -:  748:    Bug:
        -:  749:    Another subtle bug here. Need to verify that choice1 is a valid card from their hand before proceeding.
        -:  750:    It is possible that they have no cards in their hand to trash, in which case Remodel should do nothing.
        -:  751:    It is also possible that they choose a card that is invalid, in which case this function should report an error.
        -:  752:  */
        -:  753:  /*
        -:  754:    Fix:
        -:  755:    //no cards to trash
        -:  756:    if (state->handCount[currentPlayer] == 1) {
        -:  757:      return 0;
        -:  758:    }
        -:  759:    //invalid choice (tried to choose this card or a card not in the hand)
        -:  760:    if (choice1 >= state->handCound[currentPlayer] || choice1 == handPos) {
        -:  761:      return -1;
        -:  762:    }
        -:  763:  */
    #####:  764:  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  765:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:  
        -:  769:  /*
        -:  770:    Bug:
        -:  771:    This is a subtle bug right here. The function should return -1 if the card is not gained (i.e. they chose a card from which there
        -:  772:    is no supply left). Instead, the result of gainCard is ignored.
        -:  773:  */
    #####:  774:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  775:  /*
        -:  776:    Fix:
        -:  777:    if (gainCard(choice2, state, 0, currentPlayer) == -1) {
        -:  778:      //card not gained
        -:  779:      //return -1;
        -:  780:    }
        -:  781:  */
        -:  782:
    #####:  783:  for (i = 0; i < state->handCount[currentPlayer]; i++)	{
branch  0 never executed
branch  1 never executed
    #####:  784:	  if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  785:	      discardCard(i, currentPlayer, state, TRASH);			
call    0 never executed
    #####:  786:	      break;
        -:  787:    }
        -:  788:	}
    #####:  789:  return 0;
        -:  790:}
        -:  791:
function cardEffect called 22 returned 100% blocks executed 7%
       22:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
       22:  799:  int currentPlayer = whoseTurn(state);
call    0 returned 22
       22:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
       22:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
       22:  804:  int result = -1;
       22:  805:  int trashFlag = 0;
        -:  806:  
       22:  807:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 16 (fallthrough)
branch  1 taken 6
       16:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:  
        -:  811:  //uses switch to select card and perform actions
       22:  812:  switch( card ) 
branch  0 taken 6
branch  1 taken 6
branch  2 taken 6
branch  3 taken 4
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  813:    {
        -:  814:    case adventurer:
        6:  815:      result = adventurerCardEffect(currentPlayer, state);
call    0 returned 6
        6:  816:      break;
        -:  817:			
        -:  818:    case council_room:
        6:  819:      result = councilRoomCardEffect(currentPlayer, state);
call    0 returned 6
        6:  820:			break;
        -:  821:
        -:  822:    case smithy:
        6:  823:      result = smithyCardEffect(currentPlayer, state);
call    0 returned 6
        6:  824:      break;
        -:  825:		
        -:  826:    case village:
        4:  827:      result = villageCardEffect(currentPlayer, state);
call    0 returned 4
        4:  828:			break;
        -:  829:
        -:  830:    case remodel:
    #####:  831:      result = remodelCardEffect(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  832:			break;
        -:  833:
        -:  834:    case feast:
        -:  835:      //gain card with cost up to 5
        -:  836:      //Backup hand
    #####:  837:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  838:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  839:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  840:      }
        -:  841:      //Backup hand
        -:  842:
        -:  843:      //Update Coins for Buy
    #####:  844:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  845:      x = 1;//Condition to loop on
    #####:  846:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  847:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  848:	  if (DEBUG)
        -:  849:	    printf("None of that card left, sorry!\n");
        -:  850:
        -:  851:	  if (DEBUG){
        -:  852:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  853:	  }
        -:  854:	}
    #####:  855:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  856:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  857:
        -:  858:	  if (DEBUG){
        -:  859:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  860:	  }
        -:  861:	}
        -:  862:	else{
        -:  863:
        -:  864:	  if (DEBUG){
        -:  865:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  866:	  }
        -:  867:
    #####:  868:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  869:	  x = 0;//No more buying cards
        -:  870:
        -:  871:	  if (DEBUG){
        -:  872:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  873:	  }
        -:  874:
        -:  875:	}
        -:  876:      }     
        -:  877:
        -:  878:      //Reset Hand
    #####:  879:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  880:	state->hand[currentPlayer][i] = temphand[i];
    #####:  881:	temphand[i] = -1;
        -:  882:      }
        -:  883:      //Reset Hand
        -:  884:      			
    #####:  885:      return 0;
        -:  886:			
        -:  887:    case gardens:
    #####:  888:      return -1;
        -:  889:			
        -:  890:    case mine:
    #####:  891:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  892:
    #####:  893:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  894:	{
    #####:  895:	  return -1;
        -:  896:	}
        -:  897:		
    #####:  898:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:
    #####:  903:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  909:
        -:  910:      //discard card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  912:
        -:  913:      //discard trashed card
    #####:  914:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  915:	{
    #####:  916:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  917:	    {
    #####:  918:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  919:	      break;
        -:  920:	    }
        -:  921:	}
        -:  922:			
    #####:  923:      return 0;
        -:  924:		
        -:  925:    case baron:
    #####:  926:      state->numBuys++;//Increase buys by 1!
    #####:  927:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  928:	int p = 0;//Iterator for hand!
    #####:  929:	int card_not_discarded = 1;//Flag for discard set!
    #####:  930:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  931:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  933:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  934:	    state->discardCount[currentPlayer]++;
    #####:  935:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  936:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  937:	    }
    #####:  938:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  939:	    state->handCount[currentPlayer]--;
    #####:  940:	    card_not_discarded = 0;//Exit the loop
        -:  941:	  }
    #####:  942:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  943:	    if(DEBUG) {
        -:  944:	      printf("No estate cards in your hand, invalid choice\n");
        -:  945:	      printf("Must gain an estate if there are any\n");
        -:  946:	    }
    #####:  947:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  949:	      state->supplyCount[estate]--;//Decrement estates
    #####:  950:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  951:		isGameOver(state);
call    0 never executed
        -:  952:	      }
        -:  953:	    }
    #####:  954:	    card_not_discarded = 0;//Exit the loop
        -:  955:	  }
        -:  956:			    
        -:  957:	  else{
    #####:  958:	    p++;//Next card
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:			    
        -:  963:      else{
    #####:  964:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  966:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  967:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  968:	    isGameOver(state);
call    0 never executed
        -:  969:	  }
        -:  970:	}
        -:  971:      }
        -:  972:	    
        -:  973:      
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case great_hall:
        -:  977:      //+1 Card
    #####:  978:      drawCard(currentPlayer, state);
call    0 never executed
        -:  979:			
        -:  980:      //+1 Actions
    #####:  981:      state->numActions++;
        -:  982:			
        -:  983:      //discard card from hand
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case minion:
        -:  988:      //+1 action
    #####:  989:      state->numActions++;
        -:  990:			
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:			
    #####:  994:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  state->coins = state->coins + 2;
        -:  997:	}
        -:  998:			
    #####:  999:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1000:	{
        -: 1001:	  //discard hand
    #####: 1002:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1003:	    {
    #####: 1004:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1005:	    }
        -: 1006:				
        -: 1007:	  //draw 4
    #####: 1008:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1011:	    }
        -: 1012:				
        -: 1013:	  //other players discard hand and redraw if hand size > 4
    #####: 1014:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	    {
    #####: 1016:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1017:		{
    #####: 1018:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1019:		    {
        -: 1020:		      //discard hand
    #####: 1021:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1022:			{
    #####: 1023:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1024:			}
        -: 1025:							
        -: 1026:		      //draw 4
    #####: 1027:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1028:			{
    #####: 1029:			  drawCard(i, state);
call    0 never executed
        -: 1030:			}
        -: 1031:		    }
        -: 1032:		}
        -: 1033:	    }
        -: 1034:				
        -: 1035:	}
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case steward:
    #####: 1039:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
        -: 1041:	  //+2 cards
    #####: 1042:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1043:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1044:	}
    #####: 1045:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1046:	{
        -: 1047:	  //+2 coins
    #####: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:      else
        -: 1051:	{
        -: 1052:	  //trash 2 cards in hand
    #####: 1053:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1054:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1055:	}
        -: 1056:			
        -: 1057:      //discard card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1059:      return 0;
        -: 1060:		
        -: 1061:    case tribute:
    #####: 1062:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1063:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1064:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	  state->deckCount[nextPlayer]--;
        -: 1066:	}
    #####: 1067:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1069:	  state->discardCount[nextPlayer]--;
        -: 1070:	}
        -: 1071:	else{
        -: 1072:	  //No Card to Reveal
        -: 1073:	  if (DEBUG){
        -: 1074:	    printf("No cards to reveal\n");
        -: 1075:	  }
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
        -: 1079:      else{
    #####: 1080:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1081:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1082:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1083:	    state->deckCount[nextPlayer]++;
    #####: 1084:	    state->discard[nextPlayer][i] = -1;
    #####: 1085:	    state->discardCount[nextPlayer]--;
        -: 1086:	  }
        -: 1087:			    
    #####: 1088:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1089:	} 
    #####: 1090:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
    #####: 1093:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1094:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1095:	state->deckCount[nextPlayer]--;
        -: 1096:      }    
        -: 1097:		       
    #####: 1098:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1099:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1100:	state->playedCardCount++;
    #####: 1101:	tributeRevealedCards[1] = -1;
        -: 1102:      }
        -: 1103:
    #####: 1104:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1105:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1106:	  state->coins += 2;
        -: 1107:	}
        -: 1108:		    
    #####: 1109:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1110:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1111:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1112:	}
        -: 1113:	else{//Action Card
    #####: 1114:	  state->numActions = state->numActions + 2;
        -: 1115:	}
        -: 1116:      }
        -: 1117:	    
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case ambassador:
    #####: 1121:      j = 0;		//used to check if player has enough cards to discard
        -: 1122:
    #####: 1123:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1124:	{
    #####: 1125:	  return -1;				
        -: 1126:	}
        -: 1127:
    #####: 1128:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;
        -: 1131:	}
        -: 1132:
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1136:	    {
    #####: 1137:	      j++;
        -: 1138:	    }
        -: 1139:	}
    #####: 1140:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  return -1;				
        -: 1143:	}
        -: 1144:
        -: 1145:      if (DEBUG) 
        -: 1146:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1147:
        -: 1148:      //increase supply count for choosen card by amount being discarded
    #####: 1149:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1150:			
        -: 1151:      //each other player gains a copy of revealed card
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1157:	    }
        -: 1158:	}
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1162:
        -: 1163:      //trash copies of cards returned to supply
    #####: 1164:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1165:	{
    #####: 1166:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1167:	    {
    #####: 1168:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1169:		{
    #####: 1170:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1171:		  break;
        -: 1172:		}
        -: 1173:	    }
        -: 1174:	}			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case cutpurse:
        -: 1179:
    #####: 1180:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1181:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1184:	    {
    #####: 1185:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1186:		{
    #####: 1187:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1188:		    {
    #####: 1189:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1190:		      break;
        -: 1191:		    }
    #####: 1192:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1193:		    {
    #####: 1194:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1195:			{
        -: 1196:			  if (DEBUG)
        -: 1197:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1198:			}	
    #####: 1199:		      break;
        -: 1200:		    }		
        -: 1201:		}
        -: 1202:					
        -: 1203:	    }
        -: 1204:				
        -: 1205:	}				
        -: 1206:
        -: 1207:      //discard played card from hand
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1209:
    #####: 1210:      return 0;
        -: 1211:
        -: 1212:		
        -: 1213:    case embargo: 
        -: 1214:      //+2 Coins
    #####: 1215:      state->coins = state->coins + 2;
        -: 1216:			
        -: 1217:      //see if selected pile is in play
    #####: 1218:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1219:	{
    #####: 1220:	  return -1;
        -: 1221:	}
        -: 1222:			
        -: 1223:      //add embargo token to selected supply pile
    #####: 1224:      state->embargoTokens[choice1]++;
        -: 1225:			
        -: 1226:      //trash card
    #####: 1227:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1228:      return 0;
        -: 1229:		
        -: 1230:    case outpost:
        -: 1231:      //set outpost flag
    #####: 1232:      state->outpostPlayed++;
        -: 1233:			
        -: 1234:      //discard card
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case salvager:
        -: 1239:      //+1 buy
    #####: 1240:      state->numBuys++;
        -: 1241:			
    #####: 1242:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
        -: 1244:	  //gain coins equal to trashed card
    #####: 1245:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1246:	  //trash card
    #####: 1247:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1248:	}
        -: 1249:			
        -: 1250:      //discard card
    #####: 1251:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1252:      return 0;
        -: 1253:		
        -: 1254:    case sea_hag:
    #####: 1255:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1256:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1257:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1258:	  state->discardCount[i]++;
    #####: 1259:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1260:	}
        -: 1261:      }
    #####: 1262:      return 0;
        -: 1263:		
        -: 1264:    case treasure_map:
        -: 1265:      //search hand for another treasure_map
    #####: 1266:      index = -1;
    #####: 1267:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	{
    #####: 1269:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1270:	    {
    #####: 1271:	      index = i;
    #####: 1272:	      break;
        -: 1273:	    }
        -: 1274:	}
    #####: 1275:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1276:	{
        -: 1277:	  //trash both treasure cards
    #####: 1278:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1279:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1280:
        -: 1281:	  //gain 4 Gold cards
    #####: 1282:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:	    {
    #####: 1284:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1285:	    }
        -: 1286:				
        -: 1287:	  //return success
    #####: 1288:	  return 1;
        -: 1289:	}
        -: 1290:			
        -: 1291:      //no second treasure_map found in hand
    #####: 1292:      return -1;
        -: 1293:    }
        -: 1294:
       22: 1295:	discardCard(handPos, currentPlayer, state, trashFlag);
call    0 returned 22
       22: 1296:  return result;
        -: 1297:}
        -: 1298:
function discardCard called 22 returned 100% blocks executed 78%
       22: 1299:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1300:{
        -: 1301:	
        -: 1302:  //if card is not trashed, added to Played pile 
       22: 1303:  if (trashFlag < 1)
branch  0 taken 22 (fallthrough)
branch  1 taken 0
        -: 1304:    {
        -: 1305:      //add card to played pile
       22: 1306:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       22: 1307:      state->playedCardCount++;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //set played card to -1
       22: 1311:  state->hand[currentPlayer][handPos] = -1;
        -: 1312:	
        -: 1313:  //remove card from player's hand
       22: 1314:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 1315:    {
        -: 1316:      //reduce number of cards in hand
    #####: 1317:      state->handCount[currentPlayer]--;
        -: 1318:    }
       22: 1319:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -: 1320:    {
        -: 1321:      //reduce number of cards in hand
    #####: 1322:      state->handCount[currentPlayer]--;
        -: 1323:    }
        -: 1324:  else 	
        -: 1325:    {
        -: 1326:      //replace discarded card with last card in hand
       22: 1327:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1328:      //set last card to -1
       22: 1329:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1330:      //reduce number of cards in hand
       22: 1331:      state->handCount[currentPlayer]--;
        -: 1332:    }
        -: 1333:	
       22: 1334:  return 0;
        -: 1335:}
        -: 1336:
function gainCard called 1354 returned 100% blocks executed 100%
     1354: 1337:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1338:{
        -: 1339:  //Note: supplyPos is enum of choosen card
        -: 1340:	
        -: 1341:  //check if supply pile is empty (0) or card is not used in game (-1)
     1354: 1342:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 1354
branch  1 taken 696 (fallthrough)
branch  2 taken 658
        -: 1343:    {
      696: 1344:      return -1;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //added card for [whoseTurn] current player:
        -: 1348:  // toFlag = 0 : add to discard
        -: 1349:  // toFlag = 1 : add to deck
        -: 1350:  // toFlag = 2 : add to hand
        -: 1351:
      658: 1352:  if (toFlag == 1)
branch  0 taken 134 (fallthrough)
branch  1 taken 524
        -: 1353:    {
      134: 1354:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      134: 1355:      state->deckCount[player]++;
        -: 1356:    }
      524: 1357:  else if (toFlag == 2)
branch  0 taken 20 (fallthrough)
branch  1 taken 504
        -: 1358:    {
       20: 1359:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       20: 1360:      state->handCount[player]++;
        -: 1361:    }
        -: 1362:  else
        -: 1363:    {
      504: 1364:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      504: 1365:      state->discardCount[player]++;
        -: 1366:    }
        -: 1367:	
        -: 1368:  //decrease number in supply pile
      658: 1369:  state->supplyCount[supplyPos]--;
        -: 1370:	 
      658: 1371:  return 0;
        -: 1372:}
        -: 1373:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1374:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1375:{
        -: 1376:  int i;
        -: 1377:	
        -: 1378:  //reset coin count
        2: 1379:  state->coins = 0;
        -: 1380:
        -: 1381:  //add coins for each Treasure card in player's hand
       12: 1382:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 10
branch  1 taken 2 (fallthrough)
        -: 1383:    {
       10: 1384:      if (state->hand[player][i] == copper)
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        -: 1385:	{
        8: 1386:	  state->coins += 1;
        -: 1387:	}
        2: 1388:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1389:	{
    #####: 1390:	  state->coins += 2;
        -: 1391:	}
        2: 1392:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1393:	{
    #####: 1394:	  state->coins += 3;
        -: 1395:	}	
        -: 1396:    }	
        -: 1397:
        -: 1398:  //add bonus
        2: 1399:  state->coins += bonus;
        -: 1400:
        2: 1401:  return 0;
        -: 1402:}
        -: 1403:
        -: 1404:
        -: 1405://end of dominion.c
        -: 1406:
